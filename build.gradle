plugins {
    // Apply the Java plugin to add support for Java.
    id 'java'

    // Apply the application plugin to add support for building a runnable JAR.
    id 'application'
}

group = 'com.digitallocker'
version = '1.0-SNAPSHOT'

repositories {
    // Use Maven Central for dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    // It's the MySQL JDBC driver, essential for connecting to the MySQL database.
    // Replace '8.0.28' with the version you intend to use or have downloaded.
    implementation 'mysql:mysql-connector-java:8.0.28'

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
}

// Configure the test task to use JUnit Platform.
test {
    useJUnitPlatform()
}

// Define the main class for the application.
// This tells Gradle which class contains the `main` method to run the application.
application {
    mainClass = 'com.digitallocker.MainApp'
}

// Task to create a fat JAR (JAR with all dependencies included).
// This is useful for distributing the application as a single executable file.
jar {
    manifest {
        attributes 'Main-Class': 'com.digitallocker.MainApp'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    archiveClassifier = 'all' // Adds '-all' to the JAR file name (e.g., digital-locker-1.0-SNAPSHOT-all.jar)
}

// Task to copy all runtime dependencies into a 'lib' directory.
// This is an alternative to a fat JAR if you prefer to distribute dependencies separately.
task copyDependencies(type: Copy) {
    from configurations.runtimeClasspath
    into 'build/libs/lib'
}

// Make the 'copyDependencies' task run before 'jar' if you want to ensure the 'lib' folder is populated.
// You might choose to use either a fat JAR or copied dependencies, not necessarily both for distribution.
// dependsOn copyDependencies
